/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ipsl;

import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JTable;
import javax.swing.table.TableModel;
//import javax.swing.text.Document;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.Rectangle;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author K.L.A.C. LAKSHAN
 */
public class filterform extends javax.swing.JFrame {

    /**
     * Creates new form filterform
     */
    public filterform() {
        initComponents();
        //hiding the second table from the frame
        jTable2.setVisible(false);
        //jScrollPane2.setVisible(false);
    }
    
        //all the array variables are made public in order to be called at any point in the class
        //these array lists store all the data in each column from the original excel
        ArrayList<String> idval = new ArrayList<>();
        ArrayList<String> nameval = new ArrayList<>();
        ArrayList<String> genderval = new ArrayList<>();
        ArrayList<String> mediumval = new ArrayList<>();
        ArrayList<String> centerval = new ArrayList<>();
        
        //hashet filter out common data in medium and center columns
        Set<String> mediumhash = new HashSet<>();
        Set<String> centerhash = new HashSet<>();
        
        //medium and center hashsets are converted to an arraylists
        ArrayList<String> mediumarr = new ArrayList<>();
        ArrayList<String> centerarr = new ArrayList<>();
    
    //getting the total number of rows from the original excel sheet
    public int rowCount()
    {
        //DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rows=jTable1.getRowCount();
        return rows;
    }
        
    //method to sort and print data
    public void sortandPrint() {
        //by going through the visible table after importing data this stores the data
        for (int row = 0; row < rowCount(); row++) {
            //String ID = jTable1.getValueAt(row, 1).toString();
            idval.add(jTable1.getValueAt(row, 1).toString());
            nameval.add(jTable1.getValueAt(row, 2).toString());
            genderval.add(jTable1.getValueAt(row, 3).toString());
            mediumval.add(jTable1.getValueAt(row, 4).toString());
            centerval.add(jTable1.getValueAt(row, 5).toString());
            
            mediumhash.add(jTable1.getValueAt(row, 4).toString());
            centerhash.add(jTable1.getValueAt(row, 5).toString());
            
        }
            mediumarr.addAll(mediumhash);
            centerarr.addAll(centerhash);

        //jLabel2.setText(mediums.toString());
        //jLabel2.setText(idval.get(0).toString());
        //jLabel2.setText(mediumarr.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Data Management System");
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Registration Number", "Name with Initials", "Gender", "Medium", "Exam Center"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
        }

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No.", "Registration Number", "Name", "Signature"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable2.setRowHeight(23);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(1);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(2);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(2);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(1);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("Import");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Students: ");

        jButton2.setText("Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(26, 26, 26))
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Data Management System");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel3.setText("Developed by: K.L.A.C.Lakshan - lakshanklac@gmail.com");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Center", "English", "Sinhala", "Tamil"
            }
        ));
        jTable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable3);

        jLabel4.setText("Version 1.1.0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1015, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1015, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(366, 366, 366)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        File excelFile;
        FileInputStream excelFIS = null;
        XSSFWorkbook excelImportToJTable = null;
        //String defaultCurrentDirectoryPath = "C:\\Users\\K.L.A.C. LAKSHAN\\OneDrive\\Documents\\SLJSO List.xlsx";
        JFileChooser excelFileChooser = new JFileChooser();
        excelFileChooser.setDialogTitle("Select Excel File");
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showOpenDialog(null);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {
            try {
                excelFile = excelFileChooser.getSelectedFile();
                excelFIS = new FileInputStream(excelFile);
                excelImportToJTable = new XSSFWorkbook(excelFIS);
                // Get the first sheet
                XSSFSheet excelSheet = excelImportToJTable.getSheetAt(0);
                model.setRowCount(0); // Clear the existing rows to start fresh. Otherwise first four rows of jTable becomes empty.
                for (int row = 1; row <= excelSheet.getLastRowNum(); row++) {
                    //reads all the data from the excel
                    XSSFRow excelRow = excelSheet.getRow(row);
                    XSSFCell excelIndex = excelRow.getCell(0);
                    //int index=Integer.parseInt(excelIndex);
                    XSSFCell excelReg = excelRow.getCell(1);
                    XSSFCell excelName = excelRow.getCell(2);
                    XSSFCell excelGender = excelRow.getCell(3);
                    XSSFCell excelMedium = excelRow.getCell(4);
                    XSSFCell excelCenter = excelRow.getCell(5);
                    
                    // store read data to table1
                    model.addRow(new Object[]{excelIndex, excelReg, excelName, excelGender, excelMedium,excelCenter});
                }
                jLabel1.setText("Total Students: "+excelSheet.getLastRowNum());
               
               
               // JOptionPane.showMessageDialog(null, "Imported Successfully !!.....");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Something was wrong.");
            } finally {
                try {
                    if (excelFIS != null) {
                        excelFIS.close();
                    }
                    if (excelImportToJTable != null) {
                        excelImportToJTable.close();
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Something was wrong.");
                }
            }
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    //set the dimensions of the second table in order to print in A4
    public void tableDimensions()
    {
        jTable2.setRowHeight(25);
        TableColumnModel columnModel = jTable2.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(25);
            columnModel.getColumn(1).setPreferredWidth(100);
            columnModel.getColumn(2).setPreferredWidth(150);
            columnModel.getColumn(3).setPreferredWidth(150);
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        tableDimensions();
        sortandPrint();
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); // Allow selection of directories only
        fileChooser.setDialogTitle("Select a directory to save the PDF");

        int userSelection = fileChooser.showSaveDialog(this);

        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0); // Clear the existing rows to start fresh. Otherwise first four rows of jTable becomes empty.
        
        DefaultTableModel statmodel = (DefaultTableModel) jTable3.getModel();
        statmodel.setRowCount(0); 
        
        String Id=null;
        String newname = null;
        int index=0;
        int[] count=new int[3];
        int[][] stat=new int[centerarr.size()][mediumarr.size()];
        
        try {
            for(int i=0;i<mediumarr.size();i++)
        {
            //runs for all the centers
            for(int j=0;j<centerarr.size();j++)
            {
            //after each loop count set to zero in order to start from the beginning
            index=0;
            //runs for all the data in the table1
            for (int row = 0; row < jTable1.getRowCount(); row++)
            {
                //check for each medium and center
                if (mediumval.get(row).equals(mediumarr.get(i))&&centerval.get(row).equals(centerarr.get(j)))
                {
                    Id=idval.get(row);
                    newname = nameval.get(row);
                    index=index+1;
                    
                    //insert data in table2
                    
                    model.addRow(new Object[]{index,Id,newname});
                    
                    // Use newname instead of nameval
                }
                //count[i]=index;
                
                
            }
            //statmodel.addRow(new Object[]{centerarr.get(j),count[0]});
            stat[j][i]=index;
            
            //final MessageFormat headerFormat = new MessageFormat("Center: "+centerarr.get(j)+"   |   "+"Medium: "+mediumarr.get(i));
            String head="Center: "+centerarr.get(j)+"   |   "+"Medium: "+mediumarr.get(i);
            String filename=centerarr.get(j)+"_"+mediumarr.get(i);
            printnow(filename,head,userSelection,fileChooser);
            
            //jTable2.print(JTable.PrintMode.NORMAL, headerFormat,null);
            model.setRowCount(0);
            
        }
            
        }
            //jLabel4.setText(Arrays.toString(stat));
            
                for(int l=0;l<centerarr.size();l++)
                {
                
                statmodel.addRow(new Object[]{centerarr.get(l),stat[l][0],stat[l][1],stat[l][2]});
                
                
                }
            
            
           JOptionPane.showMessageDialog(null, "Successful."); 
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Something was wrong"); 
            e.printStackTrace();
        }
        //runs for all the mediums    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        try {
         
        Desktop.getDesktop().browse(new URI("https://www.linkedin.com/in/chanuka-lakshan-8347a1190/"));
         
    } catch (IOException | URISyntaxException e1) {
        e1.printStackTrace();
    }
    }//GEN-LAST:event_jLabel3MouseClicked

    public void updateStat(String[] column,String[] row) {
         // Get the TableColumnModel from the JTable
    TableColumnModel statColumnModel = jTable3.getColumnModel();
    
    // Update the column names
    statColumnModel.getColumn(0).setHeaderValue("");
    for (int i = 0; i < column.length; i++) {
        if (i < statColumnModel.getColumnCount()) {
            statColumnModel.getColumn(i+1).setHeaderValue(column[i]);
        }
        
    //DefaultTableModel statRowModel = (DefaultTableModel) jTable3.getModel();
    //statRowModel.setRowCount(0);
    
    //for (int j=0;j<centerarr.size();j++) {
      //  statRowModel.addRow(new Object[]{centerarr.get(j)}); // Assuming each row is a single string. Adjust this as needed.
   // }
    
    }

    // Notify the table header of the change
    //jTable3.getTableHeader().repaint();
    }
    //set the header
    public static class HeaderFooter extends PdfPageEventHelper {
        private final String header;

        public HeaderFooter(String header) {
            this.header = header;
        }

        @Override
        public void onEndPage(PdfWriter writer, Document document) {
            PdfContentByte cb = writer.getDirectContent();
            com.itextpdf.text.Rectangle rect = document.getPageSize();
            Phrase headerPhrase = new Phrase(header, new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.BOLD));
            ColumnText.showTextAligned(cb, Element.ALIGN_CENTER, headerPhrase,
                    rect.getWidth() / 2, rect.getTop() - 40, 0);
        }
    }
    
    //convert the table to pdf
    public static void printTableAsPDF(JTable table, String fileName, String header) throws DocumentException {
        Document document = new Document(PageSize.A4, 0,0,75,70);
    try {
        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(fileName));
        HeaderFooter event = new HeaderFooter(header);
        writer.setPageEvent(event);
        document.open();
        
        
        
        // Create PdfPTable with the same number of columns as the JTable
        PdfPTable pdfTable = new PdfPTable(table.getColumnCount());
        
        // Set the column widths (23, 150, 150, 150)
        float[] columnWidths = {27f, 135f, 200f, 170f};
        pdfTable.setWidths(columnWidths);
        
        // Add table headers
        TableModel model = table.getModel();
        for (int col = 0; col < model.getColumnCount(); col++) {
            String columnName = model.getColumnName(col);
            if (columnName == null) {
                columnName = "";
            }
            PdfPCell headerCell = new PdfPCell(new Phrase(columnName));
            headerCell.setFixedHeight(25f); // Set the row height
            pdfTable.addCell(headerCell);
        }

        // Add table data
        for (int row = 0; row < model.getRowCount(); row++) {
            for (int col = 0; col < model.getColumnCount(); col++) {
                Object cellValue = model.getValueAt(row, col);
                String cellText = (cellValue == null) ? "" : cellValue.toString();
                PdfPCell cell = new PdfPCell(new Phrase(cellText));
                cell.setFixedHeight(26f); // Set the row height
                pdfTable.addCell(cell);
            }
        }

        document.add(pdfTable);
        document.close();
        writer.close();
        //System.out.println("Table printed and saved as PDF: " + fileName);
    } catch (IOException e) {
        // Handle exception
    }
    }
    
    //print the pdf
    public void printnow(String filenamefrom,String header,int us,JFileChooser fc)
    {
        int userSelection=us;
        JFileChooser fileChooser=fc;

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            java.io.File directoryToSave = fileChooser.getSelectedFile();
            String directoryPath = directoryToSave.getAbsolutePath();

             // Automatically set the filename with .pdf extension
            String fileName = filenamefrom + ".pdf";
            String filePath = directoryPath + java.io.File.separator + fileName;

            try {
                printTableAsPDF(jTable2, filePath, header);
                //jLabel1.setText("PDF Created Successfully at " + filePath);
            } catch (DocumentException ex) {
                Logger.getLogger(filterform.class.getName()).log(Level.SEVERE, null, ex);
                //jLabel1.setText("Error Creating PDF");
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(filterform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(filterform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(filterform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(filterform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new filterform().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}


//DEVELOPED BY K.L.A.C.LAKSHAN - lakshanklac@gmail.com